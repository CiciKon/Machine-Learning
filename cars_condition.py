# -*- coding: utf-8 -*-
"""Cars-Condition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aONPYJWRTLPIuG9Rg4OFWAUc4oYf-xzq
"""

import pandas as pd
import numpy as np
import matplotlib
from sklearn import datasets, svm
from statistics import mean
from statistics import median
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error

headers = ["buying", "maint", "doors", "persons", "lug_boot", "safety", "values"]
df = pd.read_csv (r'/content/car-data.csv', names=headers)
df.head()
df.dtypes
print (df)
print(df.columns)

# apply the dtype attribute
result = df.dtypes

print("Output:")
print(result)

# Dropping the duplicate rows
df.shape
duplicate_rows_df = df[df.duplicated()]
print("number of dupicate rows:", duplicate_rows_df.shape)

df.count()
df = df.drop_duplicates()
df.head(5)
df.count()

# Dropping the missing or null values
print(df.isnull().sum())

df = df.dropna()    # Dropping the missing values.
df.count()
print(df.isnull().sum())   # After dropping the values

from sklearn.preprocessing import OneHotEncoder
buy = df['buying'].values.reshape(-1, 1)
df['buying'] = OneHotEncoder(sparse=False).fit_transform(buy)
maint = df['maint'].values.reshape(-1, 1)
df['maint'] = OneHotEncoder(sparse=False).fit_transform(maint)
doors = df['doors'].values.reshape(-1, 1)
df['doors'] = OneHotEncoder(sparse=False).fit_transform(doors)
persons = df['persons'].values.reshape(-1, 1)
df['persons'] = OneHotEncoder(sparse=False).fit_transform(persons)
lug_boot = df['lug_boot'].values.reshape(-1, 1)
df['lug_boot'] = OneHotEncoder(sparse=False).fit_transform(lug_boot)
safety = df['safety'].values.reshape(-1, 1)
df['safety'] = OneHotEncoder(sparse=False).fit_transform(safety)
values = df['values'].values.reshape(-1, 1)
df['values'] = OneHotEncoder(sparse=False).fit_transform(values)

print(df.head())

# Prediction Model Building
X = df[['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety']]
Y = df.values

# Split DataSet in test and train
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X.values, Y, test_size = 0.2, random_state = 8)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

# creating an object of LinearRegression class
# reg = LinearRegression()

from sklearn.tree import DecisionTreeRegressor
reg = DecisionTreeRegressor(random_state = 0) 

# fitting the training data
model = reg.fit(X_train,y_train)

# make predictions
y_pred = reg.predict(X_test)
print(y_pred)

## Score
print("Score : ", model.score(X_test, y_test))
print("Training set score:", reg.score(X_train, y_train))
print("Test set score:", reg.score(X_test, y_test))

mae = mean_absolute_error(y_test, y_pred)
print('MAE: %.3f' % mae)